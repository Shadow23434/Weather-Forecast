# WeatherForecast - Model Training Documentation

## 1. Introduction

The WeatherForecast project is a Django-based web application that provides weather forecasts using machine learning models. This documentation focuses specifically on the model training aspect of the project, detailing how historical weather data is processed, how models are trained, and how predictions are generated.

## 2. System Overview

The application uses Random Forest models from scikit-learn to predict weather conditions, with a primary focus on temperature prediction. The system workflow for model training and prediction includes:

1. **Data Collection**: Historical weather data is collected and stored in CSV files.
2. **Data Processing**: Raw data is cleaned, transformed, and enriched for model training.
3. **Model Training**: Random Forest regression models are trained using time-series data.
4. **Prediction**: Trained models are used to forecast weather conditions for future days.

## 3. Data Handling

### 3.1 Data Sources

The system supports multiple data sources:
- **Local CSV Files**: Historical weather data stored in the project's `data` directory
- **OpenMeteo API**: Real-time and historical weather data
- **NOAA Weather API**: Additional weather data source

### 3.2 Data Structure

Historical weather data typically includes the following fields:
- Temperature (current, min, max)
- Humidity
- Pressure
- Wind speed and direction
- Weather conditions (rain, clouds, etc.)
- Date and time

### 3.3 Data Loading and Selection

The function `read_historical_data(path)` handles loading historical data from CSV files:

```python
def read_historical_data(path):
    """
    Load and clean historical weather data.
    If the path is a directory, find the most recent CSV file in the directory.
    
    Args:
        path (str): Path to the CSV file or directory containing CSV files
    
    Returns:
        DataFrame: Cleaned weather data
    """
```

The system intelligently selects the most appropriate historical data file using the `find_city_historical_data()` function, which attempts to match data to a specific city or country.

### 3.4 Data Enrichment

The `enrich_historical_data(base_data, city)` function prepares the raw data for machine learning:

- Filters data for a specific city
- Handles missing values with appropriate filling strategies
- Standardizes column names
- Creates derived features if needed
- Generates synthetic data if insufficient real data is available

## 4. Model Training Process

### 4.1 Temperature Prediction Model

#### 4.1.1 Data Preparation

Temperature prediction uses a time-series approach with lag features:

```python
def prepare_regression_data(data, feature='Temp', window_size=3):
    """
    Prepare data for temperature regression model with time-lag features
    
    Args:
        data (DataFrame): Weather data
        feature (str): Target feature to predict (default: 'Temp')
        window_size (int): Number of previous time steps to use
    
    Returns:
        tuple: X (features), y (target)
    """
```

This function:
1. Ensures the target feature exists in the data
2. Filters out rows with missing values
3. Creates lag features (previous temperature values as predictors)
4. Handles edge cases with synthetic data generation if needed

#### 4.1.2 Model Configuration

The Random Forest regression model is configured with the following parameters (from `config.py`):

```python
RANDOM_FOREST_PARAMS = {
    'n_estimators': 100,
    'random_state': 42
}

TEST_SIZE = 0.2
RANDOM_STATE = 42
```

For more robust training, additional parameters are used:
- max_depth: 10
- min_samples_split: 2
- min_samples_leaf: 1

#### 4.1.3 Training Process

The `train_regression_model(X, y)` function performs the actual model training:

1. Validates input data, generating synthetic data if needed
2. Splits data into training and test sets
3. Initializes and trains the Random Forest model
4. Evaluates model performance using RMSE
5. Implements fallback mechanisms if training fails

Key features of the training process:
- Error handling throughout the pipeline
- Fallback to simpler models when necessary
- Data augmentation for small datasets

### 4.2 Rain Prediction Model

Although the application primarily focuses on temperature prediction, it also includes a classifier for rain prediction:

```python
def prepare_data(data):
    """
    Prepare data for rain prediction model
    
    Args:
        data (DataFrame): Weather data
        
    Returns:
        tuple: X (features), y (target), label_encoder
    """
```

```python
def train_rain_model(X, y):
    """
    Train random forest model for rain prediction
    
    Args:
        X (DataFrame): Feature matrix
        y (Series): Target variable
        
    Returns:
        RandomForestClassifier: Trained model
    """
```

This model uses a Random Forest Classifier to predict the probability of rain.

## 5. Prediction Generation

### 5.1 Temperature Forecasting

The `predict_future()` function generates forecasts for future days:

```python
def predict_future(model, current_value, feature_name='Temp', past_window=3, days=5):
    """
    Predict future daily temperature values and weather description
    
    Args:
        model: Trained regression model
        current_value: Current temperature value
        feature_name: Name of the feature (default: 'Temp')
        past_window: Number of past values to consider
        days: Number of days to forecast (default: 5)
    
    Returns:
        dict: Dictionary with min_temps, max_temps, and descriptions for each day
    """
```

The prediction process:
1. Starts with the current temperature value
2. Uses the model to predict the next day's temperature
3. Uses the prediction as input for the following day
4. Adds realistic variability to predicted values
5. Determines weather descriptions based on predicted temperatures
6. Includes fallback mechanisms for handling prediction errors

### 5.2 Weather Description Generation

Weather descriptions are generated based on temperature ranges:
- Hot (>30°C): "Clear sky", "Sunny", "Partly cloudy", "Hot"
- Warm (25-30°C): "Clear sky", "Partly cloudy", "Cloudy", "Light rain"
- Mild (15-25°C): "Partly cloudy", "Cloudy", "Light rain", "Mild"
- Cool (5-15°C): "Cloudy", "Light rain", "Rain", "Cool"
- Cold (<5°C): "Light snow", "Snow", "Freezing", "Cold"

## 6. Robustness Features

The model training implementation includes several features to ensure robustness:

### 6.1 Synthetic Data Generation

When insufficient real data is available, the system generates synthetic data:
- For completely missing data
- For small datasets that might cause instability in training
- When specific features are missing

### 6.2 Error Handling

The system implements comprehensive error handling:
- For file loading issues
- For data preprocessing exceptions
- For model training failures
- For prediction errors

### 6.3 Fallback Mechanisms

When errors occur, the system employs fallback strategies:
- Simpler models with guaranteed stability
- Trend-based predictions when models fail
- Default values based on typical weather patterns

## 7. Integration with Application

The model training and prediction are integrated with the Django web application in `views.py`:

```python
# Load and enhance historical data
enhanced_data = enrich_historical_data(historical_data, city)

# Prepare data for temperature prediction only
X_temp, y_temp = prepare_regression_data(enhanced_data)
temp_model = train_regression_model(X_temp, y_temp)

# Predict future daily temperature (5 days)
forecast = predict_future(temp_model, current_weather['current_temp'], 
                        feature_name='Temp', 
                        past_window=3,
                        days=FORECAST_DAYS)
```

## 8. Future Improvements

Potential improvements to the model training process could include:

1. **More Advanced Models**: Implementing LSTM or other deep learning models for time series prediction
2. **Feature Engineering**: Creating more sophisticated features based on meteorological principles
3. **Ensemble Approaches**: Combining multiple models for improved accuracy
4. **Hyperparameter Tuning**: Implementing automated parameter optimization
5. **Online Learning**: Updating models as new data becomes available
6. **Uncertainty Quantification**: Providing confidence intervals for predictions

## 9. Conclusion

The WeatherForecast application implements a robust machine learning approach to weather prediction, with particular focus on temperature forecasting. The system's design prioritizes:

- Reliability through comprehensive error handling
- Adaptability to different data sources
- Graceful degradation when optimal data is unavailable
- Realistic predictions that account for weather patterns

This design makes the application suitable for practical use even with limited historical data. 